# coding: utf-8

"""
    Sources

    Sources  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Authentication(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authtype': 'str',
        'id': 'str',
        'name': 'str',
        'password': 'str',
        'resource_id': 'str',
        'resource_type': 'str',
        'status': 'str',
        'status_details': 'str',
        'tenant': 'str',
        'username': 'str'
    }

    attribute_map = {
        'authtype': 'authtype',
        'id': 'id',
        'name': 'name',
        'password': 'password',
        'resource_id': 'resource_id',
        'resource_type': 'resource_type',
        'status': 'status',
        'status_details': 'status_details',
        'tenant': 'tenant',
        'username': 'username'
    }

    def __init__(self, authtype=None, id=None, name=None, password=None, resource_id=None, resource_type=None, status=None, status_details=None, tenant=None, username=None):  # noqa: E501
        """Authentication - a model defined in OpenAPI"""  # noqa: E501

        self._authtype = None
        self._id = None
        self._name = None
        self._password = None
        self._resource_id = None
        self._resource_type = None
        self._status = None
        self._status_details = None
        self._tenant = None
        self._username = None
        self.discriminator = None

        if authtype is not None:
            self.authtype = authtype
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if status is not None:
            self.status = status
        if status_details is not None:
            self.status_details = status_details
        if tenant is not None:
            self.tenant = tenant
        if username is not None:
            self.username = username

    @property
    def authtype(self):
        """Gets the authtype of this Authentication.  # noqa: E501


        :return: The authtype of this Authentication.  # noqa: E501
        :rtype: str
        """
        return self._authtype

    @authtype.setter
    def authtype(self, authtype):
        """Sets the authtype of this Authentication.


        :param authtype: The authtype of this Authentication.  # noqa: E501
        :type: str
        """

        self._authtype = authtype

    @property
    def id(self):
        """Gets the id of this Authentication.  # noqa: E501

        ID of the resource  # noqa: E501

        :return: The id of this Authentication.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Authentication.

        ID of the resource  # noqa: E501

        :param id: The id of this Authentication.  # noqa: E501
        :type: str
        """
        if id is not None and not re.search(r'^\\d+$', id):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Authentication.  # noqa: E501


        :return: The name of this Authentication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Authentication.


        :param name: The name of this Authentication.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this Authentication.  # noqa: E501


        :return: The password of this Authentication.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Authentication.


        :param password: The password of this Authentication.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def resource_id(self):
        """Gets the resource_id of this Authentication.  # noqa: E501

        ID of the resource  # noqa: E501

        :return: The resource_id of this Authentication.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Authentication.

        ID of the resource  # noqa: E501

        :param resource_id: The resource_id of this Authentication.  # noqa: E501
        :type: str
        """
        if resource_id is not None and not re.search(r'^\\d+$', resource_id):  # noqa: E501
            raise ValueError(r"Invalid value for `resource_id`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this Authentication.  # noqa: E501


        :return: The resource_type of this Authentication.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Authentication.


        :param resource_type: The resource_type of this Authentication.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def status(self):
        """Gets the status of this Authentication.  # noqa: E501


        :return: The status of this Authentication.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Authentication.


        :param status: The status of this Authentication.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_details(self):
        """Gets the status_details of this Authentication.  # noqa: E501


        :return: The status_details of this Authentication.  # noqa: E501
        :rtype: str
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this Authentication.


        :param status_details: The status_details of this Authentication.  # noqa: E501
        :type: str
        """

        self._status_details = status_details

    @property
    def tenant(self):
        """Gets the tenant of this Authentication.  # noqa: E501


        :return: The tenant of this Authentication.  # noqa: E501
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this Authentication.


        :param tenant: The tenant of this Authentication.  # noqa: E501
        :type: str
        """

        self._tenant = tenant

    @property
    def username(self):
        """Gets the username of this Authentication.  # noqa: E501


        :return: The username of this Authentication.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Authentication.


        :param username: The username of this Authentication.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Authentication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
