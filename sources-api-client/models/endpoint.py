# coding: utf-8

"""
    Sources

    Sources  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Endpoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'certificate_authority': 'str',
        'created_at': 'datetime',
        'default': 'bool',
        'host': 'str',
        'id': 'str',
        'path': 'str',
        'port': 'int',
        'role': 'str',
        'scheme': 'str',
        'source_id': 'str',
        'tenant': 'str',
        'updated_at': 'datetime',
        'verify_ssl': 'bool'
    }

    attribute_map = {
        'certificate_authority': 'certificate_authority',
        'created_at': 'created_at',
        'default': 'default',
        'host': 'host',
        'id': 'id',
        'path': 'path',
        'port': 'port',
        'role': 'role',
        'scheme': 'scheme',
        'source_id': 'source_id',
        'tenant': 'tenant',
        'updated_at': 'updated_at',
        'verify_ssl': 'verify_ssl'
    }

    def __init__(self, certificate_authority=None, created_at=None, default=None, host=None, id=None, path=None, port=None, role=None, scheme=None, source_id=None, tenant=None, updated_at=None, verify_ssl=None):  # noqa: E501
        """Endpoint - a model defined in OpenAPI"""  # noqa: E501

        self._certificate_authority = None
        self._created_at = None
        self._default = None
        self._host = None
        self._id = None
        self._path = None
        self._port = None
        self._role = None
        self._scheme = None
        self._source_id = None
        self._tenant = None
        self._updated_at = None
        self._verify_ssl = None
        self.discriminator = None

        if certificate_authority is not None:
            self.certificate_authority = certificate_authority
        if created_at is not None:
            self.created_at = created_at
        if default is not None:
            self.default = default
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if path is not None:
            self.path = path
        if port is not None:
            self.port = port
        if role is not None:
            self.role = role
        if scheme is not None:
            self.scheme = scheme
        if source_id is not None:
            self.source_id = source_id
        if tenant is not None:
            self.tenant = tenant
        if updated_at is not None:
            self.updated_at = updated_at
        if verify_ssl is not None:
            self.verify_ssl = verify_ssl

    @property
    def certificate_authority(self):
        """Gets the certificate_authority of this Endpoint.  # noqa: E501

        Optional X.509 Certificate Authority  # noqa: E501

        :return: The certificate_authority of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._certificate_authority

    @certificate_authority.setter
    def certificate_authority(self, certificate_authority):
        """Sets the certificate_authority of this Endpoint.

        Optional X.509 Certificate Authority  # noqa: E501

        :param certificate_authority: The certificate_authority of this Endpoint.  # noqa: E501
        :type: str
        """

        self._certificate_authority = certificate_authority

    @property
    def created_at(self):
        """Gets the created_at of this Endpoint.  # noqa: E501


        :return: The created_at of this Endpoint.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Endpoint.


        :param created_at: The created_at of this Endpoint.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def default(self):
        """Gets the default of this Endpoint.  # noqa: E501


        :return: The default of this Endpoint.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Endpoint.


        :param default: The default of this Endpoint.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def host(self):
        """Gets the host of this Endpoint.  # noqa: E501

        URI host component  # noqa: E501

        :return: The host of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Endpoint.

        URI host component  # noqa: E501

        :param host: The host of this Endpoint.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this Endpoint.  # noqa: E501

        ID of the resource  # noqa: E501

        :return: The id of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Endpoint.

        ID of the resource  # noqa: E501

        :param id: The id of this Endpoint.  # noqa: E501
        :type: str
        """
        if id is not None and not re.search(r'^\\d+$', id):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._id = id

    @property
    def path(self):
        """Gets the path of this Endpoint.  # noqa: E501

        URI path component  # noqa: E501

        :return: The path of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Endpoint.

        URI path component  # noqa: E501

        :param path: The path of this Endpoint.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this Endpoint.  # noqa: E501

        URI port component  # noqa: E501

        :return: The port of this Endpoint.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Endpoint.

        URI port component  # noqa: E501

        :param port: The port of this Endpoint.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def role(self):
        """Gets the role of this Endpoint.  # noqa: E501


        :return: The role of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Endpoint.


        :param role: The role of this Endpoint.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def scheme(self):
        """Gets the scheme of this Endpoint.  # noqa: E501

        URI scheme component  # noqa: E501

        :return: The scheme of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this Endpoint.

        URI scheme component  # noqa: E501

        :param scheme: The scheme of this Endpoint.  # noqa: E501
        :type: str
        """

        self._scheme = scheme

    @property
    def source_id(self):
        """Gets the source_id of this Endpoint.  # noqa: E501

        ID of the resource  # noqa: E501

        :return: The source_id of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Endpoint.

        ID of the resource  # noqa: E501

        :param source_id: The source_id of this Endpoint.  # noqa: E501
        :type: str
        """
        if source_id is not None and not re.search(r'^\\d+$', source_id):  # noqa: E501
            raise ValueError(r"Invalid value for `source_id`, must be a follow pattern or equal to `/^\\d+$/`")  # noqa: E501

        self._source_id = source_id

    @property
    def tenant(self):
        """Gets the tenant of this Endpoint.  # noqa: E501


        :return: The tenant of this Endpoint.  # noqa: E501
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this Endpoint.


        :param tenant: The tenant of this Endpoint.  # noqa: E501
        :type: str
        """

        self._tenant = tenant

    @property
    def updated_at(self):
        """Gets the updated_at of this Endpoint.  # noqa: E501


        :return: The updated_at of this Endpoint.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Endpoint.


        :param updated_at: The updated_at of this Endpoint.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def verify_ssl(self):
        """Gets the verify_ssl of this Endpoint.  # noqa: E501

        Should SSL be verified  # noqa: E501

        :return: The verify_ssl of this Endpoint.  # noqa: E501
        :rtype: bool
        """
        return self._verify_ssl

    @verify_ssl.setter
    def verify_ssl(self, verify_ssl):
        """Sets the verify_ssl of this Endpoint.

        Should SSL be verified  # noqa: E501

        :param verify_ssl: The verify_ssl of this Endpoint.  # noqa: E501
        :type: bool
        """

        self._verify_ssl = verify_ssl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Endpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
